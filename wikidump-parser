#!/usr/bin/perl
use strict;
use Getopt::Std;
use Pod::Usage;
use Parse::MediaWikiDump;
use List::Util qw[min max];
use DK;
use Data::Dumper;

binmode(STDOUT, ":utf8");

my %modules = ( 
  dk => { 
    name => "Datumskonventionen", 
    func => \&mod_datumsformat,
    show_info => 5,
    show_contextlines => 5
  },
  "dker" => { 
    name => "Datumskonventionen (er)", 
    func => \&mod_datumsformat,
    show_info => 5,
    show_contextlines => 5
  },
  "dkyy" => { 
    name => "Datumskonventionen (yy)", 
    func => \&mod_datumsformat,
    show_info => 5,
    show_contextlines => 5
  },
  "dkyyy" => { 
    name => "Datumskonventionen (yyy)", 
    func => \&mod_datumsformat,
    show_info => 5,
    show_contextlines => 5
  },
  bkl => { 
    name => "Begriffsklaerung", 
    func => \&mod_bkl,
    show_info => -1
  },
  red => { 
    name => "Redirects", 
    func => \&mod_redirects,
    redirects => 1, 
    show_info => -1,
    show_contextlines => -1
  },
  dagger => { 
    name => "Pluszeichen als Dagger", 
    func => \&mod_plusdagger,
    show_context => 10,
    show_contextlines => 5
  },
  'grep' => {
    name => "Grep",
    func => \&mod_simpleregexp,
    show_info => -1,
    show_contextlines => 5
  }
);

getopts("hc:l:i:d", \my %opts);

pod2usage(-verbose => 1) if $opts{h};
pod2usage unless @ARGV;

my $filename = shift @ARGV;
my $position_file = $filename.".position";

my $debug = defined $opts{d};

my @mods;

pod2usage("no module selected") if scalar @ARGV == 0;
for (@ARGV) {
  my $mod = $modules{$_};
  pod2usage("module $_ is unkown") if not defined $mod;
  push @mods, $mod;
  $mod->{show_context} ||= 30;
  $mod->{show_contextlines} ||= 0;
  $mod->{show_info} ||=0;
  $mod->{show_contextlines} = $opts{l} if defined $opts{l};
  $mod->{show_info} = $opts{i} if defined $opts{i};
  $mod->{shortname} = $_;
  $mod->{redirects} ||=0;
  $mod->{count} = 0; # found-counter
}

my $count = -1;

my %dk_filter_stats;
my $dk_filter_stats = 0;

#TODO: diese globalen Variablen entfernen
my $found;
my $context;
my $info;

my $secondary_flag = 0;
my $secondary_count = 0;

my $parser= Parse::MediaWikiDump::Pages->new($filename);

###########################################
# Main
###########################################

my $page;

my $time_start = time;
my @time_hist;
my @byte_hist;
my $time_hist_length = 100;
for (my $i = 0; $i < $time_hist_length; $i++) {
  push @time_hist, $time_start;
  push @byte_hist, 0;
}
my $progress_step = 100; # in Artikeln

my $old_position = load_position();
print STDERR "seeking to last position ($old_position)\n" if $old_position > 0;

while(defined($page = $parser->next)) {
  $count++;
  #last if $count > 5000;

  print_progress() if ($count % $progress_step == 0);

  next if $count < $old_position;
  if ($count == $old_position) {
    print STDERR "\nstarting at position $count\n";
    register_quit_hook();
  }

  my $title = $page->title;

  print STDERR "=========\n$title\n" if $debug;

  foreach my $mod (@mods) {
    ($found, $context, $info, $secondary_flag, $secondary_count) = ();

    $mod->{func}->($mod, $page) unless $page->redirect and !$mod->{redirects};
  
    if ($found > 0 ) {
      $mod->{count}++;
      output_one($mod, $title, $found == $secondary_count);
    }

  }

}

print_progress();
print STDERR "\n";

###########################################
sub register_quit_hook {
###########################################
  $SIG{INT} = \&quit;
  $SIG{KILL} = \&quit;
  $SIG{TERM} = \&quit;
  $SIG{QUIT} = \&quit;
}

###########################################
sub quit {
###########################################
  save_position();
  die "\nquit; position ($count) saved";
}

###########################################
sub load_position {
###########################################
  return 0 unless -e $position_file;
  open FILE, $position_file or die $!;
  my $pos = <FILE>;
  close FILE;
  return $pos;
}

###########################################
sub save_position {
###########################################
  open FILE, ">", $position_file or die $!;
  print FILE $count;
  close FILE;
}

###########################################
sub print_progress {
###########################################
  my $time_cur = time;
  my $byte_cur = $parser->current_byte;
  
  my $time_last = shift @time_hist;
  my $byte_last = shift @byte_hist;

  my $size = $parser->size;

  sub _print_rate {
    my ($text, $time_cur, $time_diff, $byte_cur, $byte_diff, $lemma_diff) = @_;
    my $rate = ($time_diff>0)?($byte_diff / ($time_diff)):0;
    my $lemma_rate = ($time_diff>0)?($lemma_diff / ($time_diff)):0;
    my $eta = ($rate>0)?(int (($size - $byte_cur) / $rate)):0;
    my $time_end = $eta + $time_cur - $time_start;
    printf STDERR ' %s: %d:%02d/%d:%02d (%.02f MB/s, %d A/s)', 
      $text,
      $eta / 60,
      $eta % 60,
      $time_end / 60,
      $time_end % 60,
      $rate / 1024 / 1024,
      $lemma_rate;
  }

  print STDERR "---------\n" if $debug;
 
  printf STDERR "\r".'%2.2f%% %d:%02d',
    $byte_cur/$size*100,
    ($time_cur-$time_start) / 60,
    ($time_cur-$time_start) % 60;
  _print_rate("total", $time_cur, $time_cur - $time_start,
              $byte_cur, $byte_cur, $count);
  _print_rate("cur", $time_cur, $time_cur - $time_last, 
              $byte_cur, $byte_cur - $byte_last,
              min($progress_step * $time_hist_length, $count));

  print STDERR " mods:";
  foreach my $mod (@mods) {
    printf STDERR " %s (%i)",
      $mod->{shortname},
      $mod->{count};
  }

  print STDERR "\n" if $debug;
  
  if ($debug and $dk_filter_stats > 0) {
    print STDERR " filter: $dk_filter_stats = ";
    print keys %dk_filter_stats;
    foreach my $filter (sort keys %dk_filter_stats) {
      printf STDERR " %s (%i)", $filter, $dk_filter_stats{$filter};
    }
    print STDERR "\n";
  }


  push @time_hist, $time_cur;
  push @byte_hist, $byte_cur;
}

###########################################
# Modules
###########################################

###########################################
sub mod_simpleregexp {
###########################################
  my($mod, $page) = @_;
  return unless $page->namespace eq ''; # nur Artikel-Namensrausm
  my $title = $page->title;
  $_ = ${$page->text};
  if (/class="(prettytable|wikitable)"/i) {
    insert_found($mod, $page->title,$`,$&,$');
#    $_=$';
  }
}

###########################################
sub mod_selbstlinks {
###########################################
  my($page) = @_;
  my($title, $text) = ($page->title, ${$page->text});
  $_ = $text;
  while (/\[\[([^\]\|]+)(\||\]\])/) {
    if ($1 eq $title) {
      insert_found($title,$`,$&,$');
    }
    $_=$';
  }
}

###########################################
sub mod_bkl {
###########################################
  my($mod, $page) = @_;
  return unless $page->namespace eq ''; # nur Artikel-Namensrausm
  my $title = $page->title;
  $_ = ${$page->text};
  if (/\{\{[Bb]egriffsklärung\}\}/) {
    insert_simple($mod, $title ,"Position der Vorlage") if ($` =~ /^\s*$/);
    insert_simple($mod, $title, "Aufzaehlung") if (/^\s*#/m);
    insert_simple($mod, $title, "fehlende Einleitung") if (/^\s*\*/);
  }
  if (/\{\{BKL\}\}/) {
    insert_simple($mod, $title, "Falsche Vorlage");
  }
  if (/\[\[[KkCc]ategorie: *Begriffsklärung\]\]/) {
    insert_simple($mod, $title, "Kategorie");
  }
}

###########################################
sub mod_redirects {
###########################################
  my($mod, $page) = @_;
  return unless $page->redirect;
  my $title = $page->title;
  $_ = ${$page->text};
  #s/\#REDIRECT[ :]*\[\[.*?\]\]\.?//i; 
  s/\#REDIRECT.*$//mi; 
  my $context_hack = $_; #Hack
  s/\[\[.*?\]\]//g; # Links entfernen (inkl. Kategorien)
  s/\{\{.*?\}\}//sg; # Vorlagen entfernen
  s/\s//g; # Leerzeichen entfernen
  insert_simple($mod, $title ,"Text (" . (length $_) . ")") if length $_ > 0; 
  $context = $context_hack;
}

###########################################
sub mod_datumsformat {
###########################################
  my($mod, $page) = @_;

  my @founds = DK::check($mod, $page);
  for my $found (@founds) {
    $secondary_flag = $found->{secondary_flag};
    insert_found($mod, $page->title, $found->{before}, $found->{match}, $found->{after});
  }
}

###########################################
sub mod_plusdagger {
###########################################
  my($mod, $page) = @_;
  $_ = ${$page->text};
  while (/[(;,] ?\+ ?(\[\[)?\d{1,2}\./) {
    insert_found($mod, $page->title,$`,$&,$');
    $_ = $';
  }
}

###########################################
# Allgemeine Routinen
###########################################

###########################################
sub insert_found {
###########################################
  my($mod, $title, $before, $match, $after) = @_;
  my $show_context = $mod->{show_context};
  my $show_info = $mod->{show_info};
 
  $found++;
  $secondary_count++ if $secondary_flag;
  $secondary_flag = 0;
  if ($show_context) {
    $context .= substr($before,length($before)-$show_context,$show_context)
        	      .$match.substr($after,0,$show_context)."\n";
  }
  $match = "<nowiki>$match</nowiki>" if $match =~ /[\[\]]/;
  if ($found <= $show_info || $show_info == -1) {
    $info .= ", $match";
  } elsif ($found == $show_info + 1 && $show_info != 0) {
    $info .= ", ...";
  }

  print STDERR "insert $match\n" if $debug;
}

###########################################
sub insert_simple {
###########################################
  my ($mod, $title, $text) = @_;
  insert_found($mod, $title, undef, $text, undef);
}

###########################################
sub output_one {
###########################################
  my ($mod, $title, $secondary) = @_;
  my $show_context = $mod->{show_context};
  my $show_info = $mod->{show_info};
  my $show_contextlines = $mod->{show_contextlines};
  chomp $context;
  print "$mod->{shortname}: ";
  print ":" if $secondary;
  print	"*[[$title]]";
  if ($info) {
    print $info;
  }
  if ($found > $show_info && $show_info >= 0) {
    print " ($found)";
  }
  print "\n";
  $| = 1;
  my $i = 0;
  foreach my $line (split /\n/, $context) {
    if ($i++ < $show_contextlines || $show_contextlines == -1) { 
      print "$mod->{shortname}: ";
      print ":" if $secondary;
      print ":<nowiki>$line</nowiki>\n"; 
    }
  }
}

__END__

=head1 NAME

wikidump-parser - Parse wikipedias xml-dump

=head1 SYNOPSIS

wikidump-parser [-h] [-i <#>] [-l <#>] [-c <#>] <xml-dump-file> <mod> [<mod> ]*

=head1 ARGUMENTS

  dk     # Datumskonvention (1.1.2000)
  dkyy   # Datumskonvention (1.1.82)
  dkyyy  # Datumskonvention (1.1.333)
  bkl    # diverses bei BKL-Seiten
  red    # Redirects

=head1 OPTIONS

  -i <#> # num. of occurences to be shown (0), -1=infty
  -l <#> # num. of context-lines to be shown (0), -1=infty;
  -c <#> # num. of context-chars to be shown before/after occurence (30)
  -h     # show help
