#!/usr/bin/perl
use strict;
use Getopt::Std;
use Pod::Usage;
use Parse::MediaWikiDump;

binmode(STDOUT, ":utf8");

my %modules = ( 
  dk => { 
    name => "Datumskonventionen", 
    func => \&mod_datumsformat,
    show_info => 5
  },
  'grep' => {
    name => "Grep",
    func => \&mod_simpleregexp,
    show_contextlines => 1
  }
);

getopts("hc:l:i:", \my %opts);

pod2usage(-verbose => 1) if $opts{h};
pod2usage unless @ARGV;

my $filename = shift @ARGV;

my @mods;

pod2usage("no module selected") if scalar @ARGV == 0;
for (@ARGV) {
  my $mod = $modules{$_};
  pod2usage("module $_ is unkown") if not defined $mod;
  push @mods, $mod;
  $mod->{show_context} ||= 30;
  $mod->{show_contextlines} ||= 0;
  $mod->{show_info} ||=0;
  $mod->{show_contextlines} = $opts{l} if defined $opts{l};
  $mod->{show_info} = $opts{i} if defined $opts{i};
  $mod->{shortname} = $_;
}

my $count = 0;

#TODO: diese globalen Variablen entfernen
my $found;
my $context;
my $info;

my $parser= Parse::MediaWikiDump::Pages->new($filename);

###########################################
# Main
###########################################

my $page;

my $time_start = time;
my $time_last = $time_start;

while(defined($page = $parser->next)) {
  $count++;

  my $title = $page->title;

  foreach my $mod (@mods) {
    ($found, $context, $info) = ();

    $mod->{func}->($mod, $page);
  
    output_one($mod, $title) if $found;
  }
  
  print_progress() if ($count % 1000 == 0);
}

print_progress();
print_stats();

###########################################
sub print_progress {
###########################################
  my $time_cur = time;

  my $byte_cur = $parser->current_byte;
  my $size = $parser->size;
  my $time_diff = $time_cur - $time_start;
  my $rate = $byte_cur / ($time_cur - $time_start);
  my $eta = int (($size - $byte_cur) / $rate);
  printf STDERR '%2.2f%% %d:%02d %d:%02d (%.2f MB/s)'."\n", 
    $byte_cur/$size*100,
    $time_diff / 60,
    $time_diff % 60,
    $eta / 60,
    $eta % 60,
    $rate / 1024 / 1024;

  $time_last = $time_cur;
}

###########################################
sub print_stats {
###########################################
#  my $hits = scalar keys %found;
#  printf STDERR "hits %d/%d (%.2f%%)\n",
#    $hits, $count, 1.0 * $hits / $count * 100;
}

###########################################
# Modules
###########################################

###########################################
sub mod_simpleregexp {
###########################################
  my($mod, $page) = @_;
  $_ = ${$page->text};
  while (/Begriffskl.rung/i) {
    insert_found($mod, $page->title,$`,$&,$');
    $_=$';
  }
}

###########################################
sub mod_selbstlinks {
###########################################
  my($page) = @_;
  my($title, $text) = ($page->title, ${$page->text});
  $_ = $text;
  while (/\[\[([^\]\|]+)(\||\]\])/) {
    if ($1 eq $title) {
      insert_found($title,$`,$&,$');
    }
    $_=$';
  }
}

###########################################
sub mod_datumsformat {
###########################################
  my($mod, $page) = @_;
  return unless $page->namespace eq ''; # nur Artikel-Namensrausm
  
  $_ = ${$page->text};

  s/== *(Literatur|Weblinks?|Quellen?|Bibliogra(ph|f)ie)(.*?)==(.*?)(?===|\[\[Kategorie|\{\{Personendaten|$)//sg; # Abschnitte entfernen
  s/\{\{ChartplatzierungenX?\}\}(.*?)<\/div>//sg; # chartboxen
  s/^[\| ]*(Abbildung|Bild)\s*=.*$//img; # Bild-Parameter in Infoboxen

  # todo: 
  # Zitat-Vorlagen
  # "vermutlich http-link" überprüfen
  # Chartplatzierungen sieht komisch aus
  # Literatur/Weblinks/etc.-Abschnitte verbessern (auch "===")
  #   z.B. [[Alfred Philippson]]
  # Kommentare über mehrere Zeilen werden nicht erkannt
  # {{Großes Bild}} 

  while (/(\d{1,2})\. ?(\d{1,2})\. ?(\d{2}(\d{2})?)/g) {
    if ($' !~ /^\.?\d/ and   # nur drei Zahlengruppen
        $` !~ /\d\.?$/ and  
	$2 <= 12 and  # plausibles Datum 
	$2 >= 1 and  # plausibles Datum 
	$1 <= 31 and
	$1 >= 1 and
	$` !~ /http:\/\/\S*$/ and # link
	$' !~ /^\s*<!-- ?sic/ and #sic-Kommentar
        $` !~ /[|=]\s*$/s and # parameter oder Tabelle
        $' !~ /^\s*\|/s and # parameter oder Tabelle
        $' !~ /^[^\[\]]*\][^\]]+/s and # vermutlich http-link
	$' !~ /^[^<]*<\/(ref|small|gallery)>/s and # small- und ref-Tag
	$' !~ /^[^<]*\/>/ and # für <ref name="....." />
	$` !~ /<!--[^>]*$/s and # Kommentar
        $` !~ /\{\{PND[^\}]*$/s and # im PND Eintrag
        $` !~ /\[\[(Bild|Image):[^\]\|]*$/i # Bild-Wikilink
      ) {
      insert_found($mod, $page->title,$`,$&,$');
    }
  }
}

###########################################
sub mod_plusdagger {
###########################################
  my($p, $title, $text) = @_;
  $_ = $text;
  while (/[;,] ?\+ ?(\[\[)?\d{1,2}\./) {
    insert_found($title,$`,$&,$');
    $_ = $';
  }
}

###########################################
# Allgemeine Routinen
###########################################

###########################################
sub insert_found {
###########################################
  my($mod, $title, $before, $match, $after) = @_;
  my $show_context = $mod->{show_context};
  my $show_info = $mod->{show_info};
  
  $found++;
  if ($show_context) {
    $context .= substr($before,length($before)-$show_context,$show_context)
        	      .$match.substr($after,0,$show_context)."\n";
  }
  if ($found <= $show_info || $show_info == -1) {
    $info .= ", $match";
  } elsif ($found == $show_info + 1 && $show_info != 0) {
    $info .= ", ...";
  }
}

###########################################
sub output_one {
###########################################
  my ($mod, $title) = @_;
  my $show_context = $mod->{show_context};
  my $show_info = $mod->{show_info};
  my $show_contextlines = $mod->{show_contextlines};
  chomp $context;
  print "$mod->{shortname}: ";
  print "*[[$title]]";
  if ($info) {
    print $info;
  }
  if ($found > $show_info) {
    print " ($found)";
  }
  print "\n";
  $| = 1;
  my $i = 0;
  foreach my $line (split /\n/, $context) {
    if ($i++ < $show_contextlines || $show_contextlines == -1) { 
      print "$mod->{shortname}: ";
      print "<nowiki>$line</nowiki><br/>\n"; 
    }
  }
}

__END__

=head1 NAME

wikidump-parser - Parse wikipedias xml-dump

=head1 SYNOPSIS

wikidump-parser [-h] [-i <#>] [-l <#>] [-c <#>] <mod> <xml-dump-file>

=head1 ARGUMENTS

  dk     # Datumskonvention (1.1.2000)
  sl     # Selbstlinks
  grep <regexp>
         # use the userspecitifed regexp for grep

=head1 OPTIONS

  -i <#> # num. of occurences to be shown (0), -1=infty
  -l <#> # num. of context-lines to be shown (0), -1=infty;
  -l <#> # num. of context-chars to be shown before/after occurence (30)
  -h     # show help
