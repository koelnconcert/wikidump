#!/usr/bin/perl
use Getopt::Std;

getopts("cdgu", \my %opts);

open DATEI, $ARGV[0];

binmode(STDERR, ":utf8");
binmode(STDOUT, ":utf8");
binmode(STDIN, ":utf8");
binmode(DATEI, ":utf8");

my %ausschluss;

while (<DATEI>) {
  chomp;
  my ($lemma, $found, $reason) =
     /^:?\* *\[\[(.*?)\]\], ([^<]*)(?:<small>)?([^<]*)(?:<\/small>)?/ or next;
  $lemma =~ tr/_/ /;
  $found =~ s/ *$//;
  $reason = "---" unless $reason;
  $ausschluss{$lemma} = { 
    found => $found,
    reason => $reason
  };
#  print "$lemma, $data, $reason---\n";
}

close DATEI;

my %parser;
my $lemma;

while (<STDIN>) {
  chomp;
  if (/^(:?)\*\[\[(.*?)\]\], (.*?) *$/) {
    ($sec, $lemma, $found) = ($1,$2,$3);
    $lemma =~ tr/_/ /;
    $found =~ s/ *$//;
    $parser{$lemma} = {
      found => $found,
      primary => $sec eq "",
      context => ""
    }
  } elsif (($context) = /^:*<nowiki>(.*)<\/nowiki>/) {
    $parser{$lemma}->{context} .= $context."\n";
  }
}

my %reasons;
foreach $val (values %ausschluss) {
  $reasons{$val->{reason}} += 1;
}

@reasons = sort { $reasons{$b} <=> $reasons{$a} } keys %reasons;
@lemmata = sort keys %ausschluss;

if ($opts{g}) {
  foreach $reason (@reasons) {
    print "== $reason ($reasons{$reason}) ==\n";
    foreach $lemma (@lemmata) {
      if ($ausschluss{$lemma}->{reason} eq $reason) {
        print_one($lemma);
      }
    }
  }
} else {
  foreach $lemma (@lemmata) {
    print_one($lemma);
  }
}

if ($opts{u}) {
  update_ausschluss();
}

sub update_ausschluss {
  open DATEI, $ARGV[0];
  binmode(DATEI, ":utf8");

  while (<DATEI>) {
    if (my ($lemma) = /^\*\[\[(.*?)\]\]/) {
      print STDERR "*[[$lemma]], ".$parser{$lemma}->{found}." <small>".$ausschluss{$lemma}->{reason}."</small>\n";
    } else {
      print STDERR;
    }
  }
  close DATEI;
}

sub print_one {
  my ($lemma) = @_;
  $parser = $parser{$lemma};
  $ausschluss = $ausschluss{$lemma};
  $found1 = $ausschluss->{found};
  $found2 = $parser->{found};
  if (not $opts{d} or $found1 ne $found2) {
    print "*[[$lemma]]";
    print " (Secondary)" if not $parser->{primary};
    print ", $ausschluss->{reason}" if $ausschluss->{reason};
    print "\n";
    if ($found1 eq $found2) {
      print "$found1\n";
    } else {
      print ": < $found1\n: > $found2\n";
    }
    if ($opts{c}) {
      $context = $parser->{context};
      chomp $context;
      foreach $line (split /\n/, $context) {
        print "::<nowiki>$line</nowiki>\n";
      } 
    }
  }
}

